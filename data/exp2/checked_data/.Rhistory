# Define a custom color palette for the models
model_colors <- c(
"Llama 3.2 1B"    = "#a6cee3",
"Llama 3.2 3B"    = "#1f78b4",
"Llama 3.1 8B"    = "#b2df8a",
"GPT-3.5 Turbo"   = "#33a02c",
"GPT-4o mini"     = "#fb9a99",
"GPT-4o"          = "#e31a1c"
)
# Compute average accuracy per Task and Model
accuracy_summary <- combined_data %>%
group_by(Model, Task) %>%
summarise(
total = n(),
correct = sum(Correct),
accuracy = (correct / total)
) %>%
ungroup()
# Reorder the 'model' factor with the specific order
accuracy_summary$Model <- factor(accuracy_summary$Model, levels = c("Llama 3.2 1B","Llama 3.2 3B","Llama 3.1 8B","GPT-3.5 Turbo","GPT-4o mini","GPT-4o"))
accuracy_summary$Task <- factor(str_to_title(accuracy_summary$Task), levels = c("Digit", "Letter", "Word", "Emoji"))
# Create the grouped bar plot
plot_1 <- ggplot(accuracy_summary, aes(x = Task, y = accuracy, fill = Model)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7), color = "black", width = 0.7) +
labs(x = "Task",y = "Accuracy (%)",fill = "Model") +
scale_y_continuous(
limits = c(0, 1),   # Set the Y-axis limits from 0 to 100
breaks = seq(0, 1, by = .2),  # Specify the breaks for the Y-axis labels
expand = c(0, 0)  # No extra space at the top or bottom
) +
scale_fill_manual(values = model_colors) +
theme_minimal(base_size = 24) +  # Minimal theme for clean look
theme(
text = element_text(size = 24),  # Makes text readable for a research paper
axis.title.y = element_blank(),
legend.position = "inside",  # Places legend clearly
legend.position.inside = c(0.424, 0.7),
legend.background = element_rect(fill = "white", color = "black"),
panel.background = element_rect(fill = "white", color = "white"),  # Set background to white
plot.background = element_rect(fill = "white", color = "white")  # Ensure entire plot background is white
)
plot_1
# Define a custom color palette for the models
model_colors <- c(
"Llama 3.2 1B"    = "#a6cee3",
"Llama 3.2 3B"    = "#1f78b4",
"Llama 3.1 8B"    = "#b2df8a",
"GPT-3.5 Turbo"   = "#33a02c",
"GPT-4o mini"     = "#fb9a99",
"GPT-4o"          = "#e31a1c"
)
# Compute average accuracy per Task and Model
accuracy_summary <- combined_data %>%
group_by(Model, Task) %>%
summarise(
total = n(),
correct = sum(Correct),
accuracy = (correct / total)
) %>%
ungroup()
# Reorder the 'model' factor with the specific order
accuracy_summary$Model <- factor(accuracy_summary$Model, levels = c("Llama 3.2 1B","Llama 3.2 3B","Llama 3.1 8B","GPT-3.5 Turbo","GPT-4o mini","GPT-4o"))
accuracy_summary$Task <- factor(str_to_title(accuracy_summary$Task), levels = c("Digit", "Letter", "Word", "Emoji"))
# Create the grouped bar plot
plot_1 <- ggplot(accuracy_summary, aes(x = Task, y = accuracy, fill = Model)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7), color = "black", width = 0.7) +
labs(x = "Task",y = "Accuracy (%)",fill = "Model") +
scale_y_continuous(
limits = c(0, 1),   # Set the Y-axis limits from 0 to 100
breaks = seq(0, 1, by = .2),  # Specify the breaks for the Y-axis labels
expand = c(0, 0)  # No extra space at the top or bottom
) +
scale_fill_manual(values = model_colors) +
theme_minimal(base_size = 24) +  # Minimal theme for clean look
theme(
text = element_text(size = 24),  # Makes text readable for a research paper
axis.title.y = element_blank(),
legend.position = "inside",  # Places legend clearly
legend.position.inside = c(0.425, 0.7),
legend.background = element_rect(fill = "white", color = "black"),
panel.background = element_rect(fill = "white", color = "white"),  # Set background to white
plot.background = element_rect(fill = "white", color = "white")  # Ensure entire plot background is white
)
plot_1
ggsave("accuracy_by_model_and_task.png", plot = plot_1, width = 8, height = 6, dpi = 300)
View(combined_data_full_exp)
View(combined_data_full_exp)
#combined_data_full_exp <- subset(combined_data_full, Category!="Control")
#combined_data_full_exp <- combined_data_full_exp %>%
#    mutate(
#      Category = ifelse(Category == "Contradictory", "Cont", "Non-Cont")
#      )
# Calculate means and standard errors for each Source and Category
category_means <- combined_data_full_exp %>%
group_by(Source, Category, Instructions) %>%
summarise(
Mean_Accuracy = mean(Accuracy, na.rm = TRUE) / 100,
SE = sd(Accuracy, na.rm = TRUE) / sqrt(n())
)
# Create the plot
category_plot <- ggplot(category_means, aes(x = Category, y = Mean_Accuracy, fill = Instructions)) +
facet_wrap(~Source) +
geom_col(position = position_dodge(0.8), width = 0.8, color = "black") +
geom_errorbar(
aes(ymin = Mean_Accuracy - SE, ymax = Mean_Accuracy + SE),
position = position_dodge(0.8), width = 0.3, color = "black"
) +
labs(
x = "Connective Category",
y = "Mean Accuracy",
fill = "Instruction Type"
) +
theme_minimal(base_size = 20) +
scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, by = 20), expand = c(0, 0)) + # Set y-axis limits from 0 to 100
theme(
legend.position = "top",
legend.text = element_text(size = 20),
panel.grid.major = element_line(color = "gray80"),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 21),
axis.title.y=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20)
)
# Display the plot
category_plot
ggsave("full_plot_exp1.png",dpi = 300, width = 9, height = 7)
#combined_data_full_exp <- subset(combined_data_full, Category!="Control")
#combined_data_full_exp <- combined_data_full_exp %>%
#    mutate(
#      Category = ifelse(Category == "Contradictory", "Cont", "Non-Cont")
#      )
# Calculate means and standard errors for each Source and Category
category_means <- combined_data_full_exp %>%
group_by(Source, Category, Instructions) %>%
summarise(
Mean_Accuracy = mean(Accuracy, na.rm = TRUE) / 100,
SE = sd(Accuracy, na.rm = TRUE) / sqrt(n())
)
# Create the plot
category_plot <- ggplot(category_means, aes(x = Category, y = Mean_Accuracy, fill = Instructions)) +
facet_wrap(~Source) +
geom_col(position = position_dodge(0.8), width = 0.8, color = "black") +
geom_errorbar(
aes(ymin = Mean_Accuracy - SE, ymax = Mean_Accuracy + SE),
position = position_dodge(0.8), width = 0.3, color = "black"
) +
labs(
x = "Connective Category",
y = "Mean Accuracy",
fill = "Instruction Type"
) +
theme_minimal(base_size = 24) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = .2), expand = c(0, 0)) + # Set y-axis limits from 0 to 1.0
theme(
legend.position = "top",
legend.text = element_text(size = 20),
panel.grid.major = element_line(color = "gray80"),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 21),
axis.title.y=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20)
)
# Display the plot
category_plot
ggsave("full_plot_exp1.png",dpi = 300, width = 9, height = 7)
#combined_data_full_exp <- subset(combined_data_full, Category!="Control")
#combined_data_full_exp <- combined_data_full_exp %>%
#    mutate(
#      Category = ifelse(Category == "Contradictory", "Cont", "Non-Cont")
#      )
# Calculate means and standard errors for each Source and Category
category_means <- combined_data_full_exp %>%
group_by(Source, Category, Instructions) %>%
summarise(
Mean_Accuracy = mean(Accuracy, na.rm = TRUE) / 100,
SE = sd(Accuracy, na.rm = TRUE) / sqrt(n()) / 100
)
# Create the plot
category_plot <- ggplot(category_means, aes(x = Category, y = Mean_Accuracy, fill = Instructions)) +
facet_wrap(~Source) +
geom_col(position = position_dodge(0.8), width = 0.8, color = "black") +
geom_errorbar(
aes(ymin = Mean_Accuracy - SE, ymax = Mean_Accuracy + SE),
position = position_dodge(0.8), width = 0.3, color = "black"
) +
labs(
x = "Connective Category",
y = "Mean Accuracy",
fill = "Instruction Type"
) +
theme_minimal(base_size = 24) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = .2), expand = c(0, 0)) + # Set y-axis limits from 0 to 1.0
theme(
legend.position = "top",
legend.text = element_text(size = 20),
panel.grid.major = element_line(color = "gray80"),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 21),
axis.title.y=element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1, size = 20),
axis.text.y = element_text(size = 20)
)
# Display the plot
category_plot
ggsave("full_plot_exp1.png",dpi = 300, width = 9, height = 7)
# Convert the 'Source' variable to a factor with the desired order
#combined_data_full$Source <- factor(combined_data_full$Source, levels = c("Llama 3.2 1B", "Llama 3.2 3B", "Llama 3.1 8B"))
#combined_data_full$Category <- factor(combined_data_full$Category, levels = c("Contradictory", "Non-Contradictory", "Control"))
# Calculate means and standard errors for each Source and Category
category_means <- combined_data_full %>%
group_by(Source, Category) %>%
summarise(
Mean_Accuracy = mean(Accuracy, na.rm = TRUE) / 100,
SE = sd(Accuracy, na.rm = TRUE) / sqrt(n()) / 100
)
# Create the plot
category_plot <- ggplot(category_means, aes(x = Source, y = Mean_Accuracy, fill = Category)) +
geom_bar(stat = "identity", position = position_dodge(0.7), width = 0.6, color = "black") +
geom_errorbar(
aes(ymin = Mean_Accuracy - SE, ymax = Mean_Accuracy + SE),
position = position_dodge(0.7), width = 0.3, color = "black"
) +
labs(
x = "Model",
y = "Mean Accuracy",
fill = "Category"
) +
theme_minimal(base_size = 24) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = .2), expand = c(0, 0)) + # Set y-axis limits from 0 to 100
theme(
legend.position = "top",
legend.title = element_blank(),
panel.grid.major = element_line(color = "gray80"),
panel.grid.minor = element_blank(),
axis.title.y=element_blank(),
)
# Display the plot
category_plot
ggsave("accbymodelandcat_plot.png", dpi = 300, width = 9, height = 7)
plot_accuracy <- function(data, group_var1, group_var2, title) {
# Define custom color palette for "Type"
type_colors <- c(
"simple_pos"       = "#a6cee3",
"simple_neg"       = "#1f78b4",
"simple_pos_dis"   = "#b2df8a",
"comp_pos_dis"     = "#33a02c",
"simple_neg_dis"   = "#fb9a99",
"comp_neg_dis"     = "#e31a1c",
"simple_neg_conj"  = "#fdbf6f",
"inc_dis"          = "#ff7f00",
"ex_dis"           = "#cab2d6",
"comp_neg"         = "#6a3d9a",
"simple_pos_conj"  = "#ffff99",
"comp_neg_conj"    = "#b15928"
)
# Apply factor levels to ensure consistent order if "Type" is used
if ("Type" %in% c(group_var1, group_var2)) {
type_levels <- names(type_colors)
if (group_var1 == "Type") {
data[[group_var1]] <- factor(data[[group_var1]], levels = type_levels)
}
if (group_var2 == "Type") {
data[[group_var2]] <- factor(data[[group_var2]], levels = type_levels)
}
}
if (group_var1 == "Task") {
data[[group_var1]] <- factor(str_to_title(data[[group_var1]]), levels = c("Digit", "Letter", "Word", "Emoji"))
}
summary_data <- data %>%
group_by(.data[[group_var1]], .data[[group_var2]]) %>%
summarise(
total = n(),
correct = sum(Correct),
accuracy = (correct / total),
.groups = "drop"
)
ggplot(summary_data, aes(x = .data[[group_var1]], y = accuracy, fill = .data[[group_var2]])) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), color = "black", width = 0.8) +
labs(subtitle = title, x = group_var1, y = "Accuracy (%)", fill = group_var2) +
scale_y_continuous(
limits = c(0, 100),
breaks = seq(0, 100, by = 20),
expand = c(0, 0)
) +
scale_fill_manual(
values = if (group_var2 == "Type") type_colors else NULL
) +
theme_minimal() +
theme(
legend.position = "right",
legend.key.size = unit(0.8,"line"),
axis.title.y = element_blank(),
panel.background = element_rect(fill = "white", color = "white"),
plot.background = element_rect(fill = "white", color = "white")
)
}
gpt_3.5_data <- combined_data %>%
filter(Model == "GPT-3.5 Turbo")
gpt_4o_data <- combined_data %>%
filter(Model == "GPT-4o")
gpt_4o_m_data <- combined_data %>%
filter(Model == "GPT-4o mini")
L3.2_3B_data <- combined_data %>%
filter(Model == "Llama 3.2 3B")
L3.2_1B_data <- combined_data %>%
filter(Model == "Llama 3.2 1B")
L3.1_8B_data <- combined_data %>%
filter(Model == "Llama 3.1 8B")
# Create the plot
plot_gpt_3.5 <- plot_accuracy(gpt_3.5_data, "Task", "Type", "GPT-3.5 Turbo")
plot_gpt_4o <- plot_accuracy(gpt_4o_data, "Task", "Type", "GPT-4o")
plot_gpt_4o_m <- plot_accuracy(gpt_4o_m_data, "Task", "Type", "GPT-4o mini")
plot_L3.2_3B <- plot_accuracy(L3.2_3B_data, "Task", "Type", "Llama 3.2 3B")
plot_L3.2_1B <- plot_accuracy(L3.2_1B_data, "Task", "Type", "Llama 3.2 1B")
plot_L3.1_8B <- plot_accuracy(L3.1_8B_data, "Task", "Type", "Llama 3.1 8B")
plot_L3.2_1B
plot_gpt_4o_m
plot_accuracy <- function(data, group_var1, group_var2, title) {
# Define custom color palette for "Type"
type_colors <- c(
"simple_pos"       = "#a6cee3",
"simple_neg"       = "#1f78b4",
"simple_pos_dis"   = "#b2df8a",
"comp_pos_dis"     = "#33a02c",
"simple_neg_dis"   = "#fb9a99",
"comp_neg_dis"     = "#e31a1c",
"simple_neg_conj"  = "#fdbf6f",
"inc_dis"          = "#ff7f00",
"ex_dis"           = "#cab2d6",
"comp_neg"         = "#6a3d9a",
"simple_pos_conj"  = "#ffff99",
"comp_neg_conj"    = "#b15928"
)
# Apply factor levels to ensure consistent order if "Type" is used
if ("Type" %in% c(group_var1, group_var2)) {
type_levels <- names(type_colors)
if (group_var1 == "Type") {
data[[group_var1]] <- factor(data[[group_var1]], levels = type_levels)
}
if (group_var2 == "Type") {
data[[group_var2]] <- factor(data[[group_var2]], levels = type_levels)
}
}
if (group_var1 == "Task") {
data[[group_var1]] <- factor(str_to_title(data[[group_var1]]), levels = c("Digit", "Letter", "Word", "Emoji"))
}
summary_data <- data %>%
group_by(.data[[group_var1]], .data[[group_var2]]) %>%
summarise(
total = n(),
correct = sum(Correct),
accuracy = (correct / total),
.groups = "drop"
)
ggplot(summary_data, aes(x = .data[[group_var1]], y = accuracy, fill = .data[[group_var2]])) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), color = "black", width = 0.8) +
labs(subtitle = title, x = group_var1, y = "Accuracy (%)", fill = group_var2) +
scale_y_continuous(
limits = c(0, 1),
breaks = seq(0, 1.0, by = .2),
expand = c(0, 0)
) +
scale_fill_manual(
values = if (group_var2 == "Type") type_colors else NULL
) +
theme_minimal() +
theme(
legend.position = "right",
legend.key.size = unit(0.8,"line"),
axis.title.y = element_blank(),
panel.background = element_rect(fill = "white", color = "white"),
plot.background = element_rect(fill = "white", color = "white")
)
}
gpt_3.5_data <- combined_data %>%
filter(Model == "GPT-3.5 Turbo")
gpt_4o_data <- combined_data %>%
filter(Model == "GPT-4o")
gpt_4o_m_data <- combined_data %>%
filter(Model == "GPT-4o mini")
L3.2_3B_data <- combined_data %>%
filter(Model == "Llama 3.2 3B")
L3.2_1B_data <- combined_data %>%
filter(Model == "Llama 3.2 1B")
L3.1_8B_data <- combined_data %>%
filter(Model == "Llama 3.1 8B")
# Create the plot
plot_gpt_3.5 <- plot_accuracy(gpt_3.5_data, "Task", "Type", "GPT-3.5 Turbo")
plot_gpt_4o <- plot_accuracy(gpt_4o_data, "Task", "Type", "GPT-4o")
plot_gpt_4o_m <- plot_accuracy(gpt_4o_m_data, "Task", "Type", "GPT-4o mini")
plot_L3.2_3B <- plot_accuracy(L3.2_3B_data, "Task", "Type", "Llama 3.2 3B")
plot_L3.2_1B <- plot_accuracy(L3.2_1B_data, "Task", "Type", "Llama 3.2 1B")
plot_L3.1_8B <- plot_accuracy(L3.1_8B_data, "Task", "Type", "Llama 3.1 8B")
plot_L3.2_1B
plot_gpt_4o_m
library("patchwork")
plot_gpt_3.5+plot_gpt_4o+plot_L3.1_8B+plot_L3.2_3B+plot_layout(guides = 'collect')
ggsave("test_plot_1.png", dpi = 300, width = 9, height = 5)
mean_logprob_all <- dataset %>%
group_by(Contradiction, Model) %>%
summarise(
MeanLogProb = mean(LogProb, na.rm = TRUE),
SDLogProb = sd(LogProb, na.rm = TRUE),
Count = n()
)
print(mean_logprob_all)
mean_logprob_all <- mean_logprob_all %>%
mutate(
Model = factor(Model, levels = c("Llama 3.2 1B", "Llama 3.2 3B", "Llama 3.1 8B")),
Contradiction = factor(Contradiction, levels = c(1, 0, 2), labels = c(" Contradictory", "Non-Contradictory", "Control")),
Count = as.numeric(Count)
)
mean_logprob_all <- mean_logprob_all %>%
mutate(se = SDLogProb / sqrt(Count))
# Plot
ggplot(mean_logprob_all, aes(x = Model, y = MeanLogProb, fill = Contradiction)) +
geom_col(position = position_dodge(width = 0.7), width = 0.6, color = "black") +
geom_errorbar(aes(ymin = MeanLogProb - se, ymax = MeanLogProb + se),
position = position_dodge(width = 0.7), width = 0.2) +
labs(
y = "Mean Log Probability",
x = "Model",
fill = "Connective Category"
) +
scale_y_continuous(
limits = c(-5,0),
expand = c(0, 0)
) +
theme_minimal(base_size = 25) +
theme(
legend.position = "top",
legend.title = element_blank(),
panel.grid.major.x = element_blank()
)
ggsave("logprob_plot.png",dpi = 300, width = 9, height = 7)
mean_logprob_all <- dataset %>%
group_by(Contradiction, Model) %>%
summarise(
MeanLogProb = mean(LogProb, na.rm = TRUE),
SDLogProb = sd(LogProb, na.rm = TRUE),
Count = n()
)
print(mean_logprob_all)
mean_logprob_all <- mean_logprob_all %>%
mutate(
Model = factor(Model, levels = c("Llama 3.2 1B", "Llama 3.2 3B", "Llama 3.1 8B")),
Contradiction = factor(Contradiction, levels = c(1, 0, 2), labels = c(" Contradictory", "Non-Contradictory", "Control")),
Count = as.numeric(Count)
)
mean_logprob_all <- mean_logprob_all %>%
mutate(se = SDLogProb / sqrt(Count))
# Plot
ggplot(mean_logprob_all, aes(x = Model, y = MeanLogProb, fill = Contradiction)) +
geom_col(position = position_dodge(width = 0.7), width = 0.6, color = "black") +
geom_errorbar(aes(ymin = MeanLogProb - se, ymax = MeanLogProb + se),
position = position_dodge(width = 0.7), width = 0.2) +
labs(
y = "Mean Log Probability",
x = "Model",
fill = "Connective Category"
) +
scale_y_continuous(
limits = c(-5,0),
expand = c(0, 0)
) +
theme_minimal(base_size = 25) +
theme(
legend.position = "top",
legend.title = element_blank(),
axis.text.x = element_text(size = 30),
panel.grid.major.x = element_blank()
)
ggsave("logprob_plot.png",dpi = 300, width = 9, height = 7)
mean_logprob_all <- dataset %>%
group_by(Contradiction, Model) %>%
summarise(
MeanLogProb = mean(LogProb, na.rm = TRUE),
SDLogProb = sd(LogProb, na.rm = TRUE),
Count = n()
)
print(mean_logprob_all)
mean_logprob_all <- mean_logprob_all %>%
mutate(
Model = factor(Model, levels = c("Llama 3.2 1B", "Llama 3.2 3B", "Llama 3.1 8B")),
Contradiction = factor(Contradiction, levels = c(1, 0, 2), labels = c(" Contradictory", "Non-Contradictory", "Control")),
Count = as.numeric(Count)
)
mean_logprob_all <- mean_logprob_all %>%
mutate(se = SDLogProb / sqrt(Count))
# Plot
ggplot(mean_logprob_all, aes(x = Model, y = MeanLogProb, fill = Contradiction)) +
geom_col(position = position_dodge(width = 0.7), width = 0.6, color = "black") +
geom_errorbar(aes(ymin = MeanLogProb - se, ymax = MeanLogProb + se),
position = position_dodge(width = 0.7), width = 0.2) +
labs(
y = "Mean Log Probability",
x = "Model",
fill = "Connective Category"
) +
scale_y_continuous(
limits = c(-5,0),
expand = c(0, 0)
) +
theme_minimal(base_size = 25) +
theme(
legend.position = "top",
legend.title = element_blank(),
panel.grid.major.x = element_blank()
)
ggsave("logprob_plot.png",dpi = 300, width = 9, height = 7)
